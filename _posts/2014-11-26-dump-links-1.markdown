---
title: >-
    Dump Links #1
layout: post
categories: 
    - Dump Links
comments: true
tags:
    - PHPSpec 
    - Laracast 
    - CSS 
    - Laravel 
    - pagespeed 
    - DDD
identifier: dump-links-1
---

W DeSmart codziennie znajdujemy ciekawe rzeczy. Każdy członek zespołu ([DeTeam'u](http://desmart.com/who)) znajduje i dzieli się ciekawostkami z innymi za pomocą naszej wewnętrznej listy e-mailowej, prywatnej grupy na Facebooku lub na kanale HipChat. Uważam, że to bardzo przydatne i spróbuję się podzielić tymi wszystkimi ciekawostkami na blogu. Tematy będą zróżnicowane, ale najczęściej będę pisał o PHP-ie, frameworkach, CSS-ie oraz wszystkich nowinkach technologicznych. Posty z tego typu ciekawostkami będą nosiły nazwę **„Dump Links”**.

Kiedy moja skrzynka z linkami jest pełna, czyszczę ja. Staram się opisać każdy z tych linków - dlaczego to lubię, dlaczego ta technologia jest dobra lub zła etc. Mam nadzieję, że to również Cię zainteresuje i linki będą dla Ciebie pomocne. Nie przeciągając dłużej, zaczynajmy.

**[Phabricator](http://phabricator.org/)** to narzędzie z otwartym kodem źródłowym, które integruje narzędzia do zarządzania projektem, inspekcji kodu, śledzenia bugów z naszym repozytorium SVN lub Git. Chciałbym to przetestować podczas tworzenia następnego projektu.

Tworzenie aplikacji zgodnie z metodologią *Behaviour Driven Development* oferuje wiele zalet, to jest oczywiste. Ale co zrobić, jeśli wcześniej nie użyło tego w naszej aplikacji, a bardzo chce się spróbować? Naukę możesz rozpocząć z [**tutorialem na temat BDD**](http://code.tutsplus.com/tutorials/a-bdd-workflow-with-behat-and-phpspec--cms-21601), a następnie za pomocą narzędzi [PHPSpec](http://www.phpspec.net/en/latest/) oraz [Behat](http://docs.behat.org/en/v2.5/) możesz podjąć próbę wdrożenia BDD w ramach następnego projektu.

Podczas tworzenia trzeciego wydania projektu [Fooder](http://fooder.pl) postanowiliśmy zmierzyć się z [**Domain Driven Design**](https://laracasts.com/series/commands-and-domain-events). To była nasza pierwsza próba i jak się okazało, była to dobra decyzja. W rzeczywistości nasze zadanie było lekko utrudnione, ponieważ część naszej aplikacji była już napisana, ale nie poddaliśmy się i dokończyliśmy dzieło. Na początku mieliśmy wiele problemów z poprawnym nazewnictwem klas i metod, ale nauczyliśmy się tego. Teraz tworzenie aplikacji zgodnie z DDD jest dla nas bardziej naturalne i efektowne niż kiedykolwiek. Powinieneś spróbować tego. 

Ważne jest utrzymanie czystego i logicznego kodu - każdy to wie. Zwłaszcza jeśli chcesz utrzymać dobre relacje ze swoimi kolegami podczas modyfikowania i ulepszania ich kodu (i w drugą stronę również). Jeśli chciałbyś się dowiedzieć jakie zalety płyną z posiadania czystego kodu, [**spróbuj go ulepszyć**](https://laracasts.com/series/simple-rules-for-simpler-code).

Każdy kto używał Adobe Photoshop wie jakie ciekawe efekty można tworzyć za pomocą opcji mieszania tła. Teraz identyczny efekt może być prosto utworzony za pomocą [**CSS-a i właściwości *background-blend-mode***](http://www.webdesignerdepot.com/2014/07/15-css-blend-modes-that-will-supercharge-your-images). Całkiem niezłe. Może powinienem porozmawiać z naszymi kolegami z [UXPin-u](http://uxpin.com/) w celu wdrożenia tego w ich edytorze? :)

Spotkałęś się z problemem implementacji jednorazowych notyfikacji w swojej aplikacji? Prawdopodobnie znam rozwiązanie, które umożliwi Ci [**zarządzanie notyfikacjami**](https://github.com/laracasts/flash).

Duplikowanie kodu w celu wyświetlenia do w innym miejscu to nie najlepsza praktyka. Zastanawiałeś się jak zrobić to lepiej? [**Virtuoso**](https://github.com/coderabbi/virtuoso) może być rozwiązaniem. Ta prosta paczka pozwala utworzyć obiekt z Twoim widokiem, który może być wpięty do innych widków. Tą metodą nie duplikujemy kodu oraz, jeśli chcemy coś zmienić, robimy to tylko w jednym miejscu. Proste.

Kiedyś miałem problem z walidacją danych w modelu, które muszą być zapisane do bazy danych. Znalazłem rozwiązanie, które służy do [**walidacji danych w modelu**](https://github.com/dwightwatson/validating). Możesz użyć tego za każdym razem kiedy chcesz coś zapisać do bazy danych. Dzięki temu Twoja baza będzie spójna.

Wiemy, że aplikacje webowe powinny wyglądać dobrze, ale wygląd to nie jedyna ważna rzecz. Powinny one również być *SEO friendly*. Jako developer powinieneś dbać o to. Minifikacja plików \*.js oraz \*.css aktualnie jest czymś oczywistym. [**Dostępnych narzędzia**](http://nibbler.silktide.com/) pozwolą sprawdzić inne ważne punkty w aplikacji. [**Woorank**](https://www.woorank.com/) sprawdzi Twoją aplikację i zasugeruje co powinno zostać zmienione. [**Google PageSpeed**](https://developers.google.com/speed/pagespeed/insights/) zwróci uwagę na prędkość Twojej aplikacji i zasugeruje co możesz usprawnić.

To wszystko na dziś. Zostaw proszę komentarz jeśli coś nie jest czyste lub jeśli chciałbyś podzielić się czymś ze mną.

Chcesz więcej? Podziel się „Dump Links” z innymi za pomocą linków poniżej. Do usłyszenia! 
