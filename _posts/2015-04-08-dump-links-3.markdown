---
title: >-
    Dump Links #3
layout: post
categories: Dump Links
comments: true
tags: php javascript
identifier: dump-links-3
---

Przed napisaniem tego posta długo zastanawiałem się o czym chcę napisać. Byłem niezdecydowany, ponieważ wiele ciekawych projektów w ostatnim czasie zostało wydanych. Wszystkie te zabawki są interesujące, ale tylko nieliczne zostaną przedstawione. W kolejnej odsłonie „Dump Links” znajdziesz głównie linki do bibliotek i artykułów na temat JavaScript. Zachęcam do czytania! 

Przemierzając przez głębiny Internetu, natknąłem się na coś, co nazywa się [**Titon**](http://titon.io/en). Jest to kolekcja komponentów, która może być bardzo pomocna do tworzenia aplikacji webowych. Ten framework może być doskonałą alternatywą dla Bootstrapa. Może czas to wypróbować?

Świat JavaScript'owych technologii zmienia się szybko każdego dnia. Kilka lat temu prawdopodobnie użyłbyś Photoshopa do utworzenia pięknych wzorków lub tła, które mogą zostać użyte na stronie. Dzisiaj możesz uniknąć tego drogiego narzędzia. W zamian przedstawiam Ci [**Textures.js**](http://riccardoscalco.github.io/textures/) do wyżej wymienionych rzeczy. 

W niedalekiej przyszłości zamierzam zorganizować krótką prezentację na temat używania [Git](https://git-scm.com/)-a w mojej codziennej pracy. Część ludzi używających Git-a cały dzień i nie potrzebuje żadnych wskazówek, ale niektórzy mnie o to proszą. Wciąż zastanawiam się w jakiej formie powinienem przeprowadzić tę prezentację. Jako, że jestem fanem Mac'ów, mógłbym użyć [Keynote](https://www.apple.com/mac/keynote/), lecz w mojej opinii 50 slajdów to nie jest dobry pomysł na takie szkolenie. Jako, że jestem JS-owym maniakiem, zdecydowałem, że użyję [**Intro.js**](http://usablica.github.io/intro.js/). Zobaczymy, czy to narzędzie może być użyte do tworzenia interaktywnych tutoriali.

*Swoją drogą, czy wspomniałem już, że każde narzędzie napisane w JS-ie z nazwą zakończoną sufiksem **.js** jest dobre? ;)*

Nie mogłem nie wspomnieć o moim koledze Kamilu, który niedawno wydał swoją paczkę o nazwie [**ReadmeGen**](https://github.com/fojuth/readmegen). To narzędzie pozwala wygenerować *changelog* na podstawie historii z *gitowego* repozytorium. Dzięki temu możesz w szybki sposób przypomnieć sobie co zostało zrobione od czasu wydania ostatniej wersji, a następnie zaprezentować te zmiany w swoim zespole lub klientowi. To jest dobra praktyka przed wydaniem nowej wersji. Dzięki prezentacjom można odnaleźć błędy, które mogły umknąć uwadze testerom. Kamil napisał również artykuł na temat swojej [paczki na naszym blogu](http://desmart.com/blog/generate-your-projects-changelog-from-commit-messages). Zachęcam do przeczytania.

Wracając do tematu wydawania nowych wersji, Radek, nasz CTO, napisał [interesujący artykuł](http://desmart.com/blog/five-things-to-make-data-migration-easier) na temat tworzenia migracji bazodanowych. Jest to coś, co prawdopodobnie jest Ci potrzebne, kiedy tworzysz nową aplikację bazując na starym modelu bazy danych.

Bezpieczeństwo to jeden z najważniejszych elementów o które powinniśmy dbać. W DeSmart używamy szyfrowania GPG. Odwiedź stronę [GPG na Wikipedii](https://en.wikipedia.org/wiki/GNU_Privacy_Guard) i zobacz jak to działa. Jeśli nie wiesz, gdzie możesz opublikować swój publiczny klucz GPG - powinieneś odwiedzić [**Keybase**](https://keybase.io/). Jest to miejsce, gdzie możesz powiązać swoje konta z profilem na stronie. Bardzo pomocne.

Czy piszesz dużo wiadomości e-mail i tracisz równie dużo czasu na formatowanie tekstu? Przyjrzyj się dodatkowi [**Markdown Here**](http://markdown-here.com/). To proste rozszerzenie do przeglądarek, które umożliwia pisanie wiadomości e-mail zgodnie ze składnią markdown. Jeśli składnia markdown jest Ci obca - na stronie rozszerzenia znajdziesz przykłady użycia.

Podczas ostatniego spotkania PHPers, Radek wspomniał o [naszych początkach]({% post_url 2014-11-26-dump-links-1 %}) w temacie [DDD](http://www.slideshare.net/RadosawMejer/duct-taping-ddd). Osobiście uważam, że droga do tworzenia czystego kodu zgodnie z DDD jest bardzo długa, ale dzięki następującym artykułom możesz się wiele nauczyć. Sprawdź jak wprowadzić [**wzorzec repozytorium**](http://shawnmc.cool/the-repository-pattern) do swojego kodu oraz co to właściwie jest [**SOLID**](https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design) i dlaczego warto tej reguły przestrzegać.

Na dziś to wszystko. Zapraszam do dyskusji w komentarzach, jak również dzielenia się postem z innymi.

PS: Swoją drogą, czy widziałeś poprzednie wydania „Dump Links”? Znajdziesz w nich coś interesującego na temat [Laravela, Behata]({% post_url 2014-11-26-dump-links-1 %}) lub narzędzi [JS-owych]({% post_url 2015-01-12-dump-links-2 %}).
