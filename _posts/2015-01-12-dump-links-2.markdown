---
title: >-
    Dump Links #2
layout: post
categories: Dump Links
comments: true
tags: javascript php oop laravel markdown regexp
identifier: dump-links-2
---

W [poprzedniej częsci „Dump Links”]({% post_url 2014-11-26-dump-links-1 %}) skupiłem się na artykułach i linkach dotyczących języków po stronie serwera. Na dziś przygotowałem coś na temat narzędzi napisanych w języku JavaScript. Zapraszam!

[**DeJavu**](http://indigounited.com/dejavu/) to narzędzie zorientowane obiektowo dla programistów JavaScript. Biblioteka udostępnia pełny interfejs obiektowy, który jest dostępny w innych językach programowania (takich jak Java czy PHP). DeJavu oferuje klasy (włącznie z abstrakcyjnymi i finalnymi) oraz rozszerzaniem klas, interfejsy, stałe oraz atrybuty widoczności.

Ktokolwiek musiał dostosować wygląd lub zachowanie aplikacji dla różnych przeglądarek, wie jak ciężkie jest to zadanie. [**WhichBrowser**](https://github.com/WhichBrowser/Parser) na pewno będzie pomocnym narzędziem. Jego zadaniem jest wykrycie przeglądarki użytkownika (np Chrome), urządzenia (np Mobile), systemu operacyjnego (np MacOS) oraz silnika przeglądarki (np Blink). Z tą biblioteką możesz dostosować swoją aplikację pod każde z dostępnych urządzeń i przeglądarek, które są na tym urządzeniu dostępne.

Próbowałeś kiedyś stworzyć graf za pomocą HTML-a i CSS-a? Jeśli Twoja odpowiedź brzmi tak, doskonale wiesz jak skomplikowane jest to zadanie. Zainteresuj się biblioteką [**Mermaid**](https://github.com/knsv/mermaid). To narzędzie generuje [zaawansowane diagramy](http://knsv.github.io/mermaid/#mermaid) z różnymi instrukcjami zapisanymi za pomocą składni markdown. Dodatkowo pozwala na dekorowanie wygenerowanych diagramów za pomocą CSS-a, przez co ich wygląd jest jeszcze ciekawszy.

Czy kiedykolwiek przez pomyłkę wysłałeś jakieś e-maile z lokalnej maszyny (deweloperskiej) do użytkowników z produkcji? Na nieszczęście my tak. Nie chcemy, by ten błąd powtórzył się ponownie. W tym celu [**napisałem prosty mechanizm**](https://github.com/DeSmart/laravel-mailer), który dba o to za nas. Za każdym razem gdy wysyłana jest wiadomość, mechanizm sprawdza, czy adres e-mail odbiorcy znajduje się na białej liście. Jeśli tak, e-mail zostanie wysłany. Jeśli nie, wiadomość zostanie przesłana na nasze konto. To umożliwia nam bezpieczne testowanie funkcjonalności z produkcyjną bazą danych.

Spotkałeś się kiedyś z problemem doboru kolorystyki do swojej aplikacji? Jeśli tak, definitywnie powinieneś sprawdzić [**Coolors**](https://coolors.co/). To proste narzędzie służy do generowania palety z losowymi kolorami.

W [poprzednim poście]({% post_url 2014-11-26-dump-links-1 %}) wspomniałem o *Domain Driven Design* w teorii. Kilka dni później odkryłem [**interesujący artykuł**](http://cocoders.com/cocoders-design-flow-specification-and-modelling-by-example/) na temat praktycznego zastosowania DDD. To przykład aplikacji napisanej w Symfony, która również zawiera Behata. [Źródło aplikacji](https://github.com/cocoders/playground/tree/modelling-by-example) jest dostępne na Githubie.

Jeśli nie masz pomysłu na nowy rok, możesz pograć w gry lub podszkolić swoje umiejętności w wyrażeniach regularnych za pomocą [**krzyżówek zbudowanych z wyrażeń regularnych**](https://regexcrossword.com/). Wyrażenia regularne początkowo mogą sprawiać trudności dlatego krzyżówki pozwolą zrozumieć Tobie o co w nich właściwie chodzi.

Jeśli powyższy post nie usatysfakcjonował Twojego pragnienia wiedzy, polecam wybrać coś interesującego z listy [**TOP50 Code Post 2014**](http://code.tutsplus.com/articles/the-top-50-code-posts-of-2014--cms-22897). Jestem pewien, że podobnie jak ja, również znajdziesz coś interesującego dla siebie.

Nie bój się zostawić komentarza oraz podzielić się „Dump Links” z innymi. Do usłyszenia wkrótce!
